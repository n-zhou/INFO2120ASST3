package usyd.it.olympics;



/**
 * Database back-end class for simple gui.
 * 
 * The DatabaseBackend class defined in this file holds all the methods to 
 * communicate with the database and pass the results back to the GUI.
 *
 *
 * Make sure you update the dbname variable to your own database name. You
 * can run this class on its own for testing without requiring the GUI.
 */
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Properties;

/**
 * Database interfacing backend for client. This class uses JDBC to connect to
 * the database, and provides methods to obtain query data.
 * 
 * Most methods return database information in the form of HashMaps (sets of 
 * key-value pairs), or ArrayLists of HashMaps for multiple results.
 *
 * @author Bryn Jeffries {@literal <bryn.jeffries@sydney.edu.au>}
 */
public class DatabaseBackend {

    ///////////////////////////////
    /// DB Connection details
    ///////////////////////////////
    private final String dbUser;
    private final String dbPass;
	private final String connstring;


    ///////////////////////////////
    /// Student Defined Functions
    ///////////////////////////////

	
    /////  Login and Member  //////

    /**
     * Validate memberID details
     * 
     * Implements Core Functionality (a)
     *
     * @return true if username is for a valid memberID and password is correct
     * @throws OlympicsDBException 
     * @throws SQLException
     */
    public HashMap<String,Object> checkLogin(String member, char[] password) throws OlympicsDBException, SQLException  {
        HashMap<String,Object> details = null;
        Connection conn = getConnection();
        try {
	        // FIXME: REPLACE FOLLOWING LINES WITH REAL OPERATION
	        // Don't forget you have memberID variables memberUser available to
	        // use in a query.
	        // Query whether login (memberID, password) is correct...
            Statement statement = conn.createStatement();
            String query = String.format("SELECT * FROM Member WHERE LOWER(member_id) = LOWER('%s') AND pass_word = '%s';", member, new String(password));
            ResultSet rset = statement.executeQuery(query);
            if(rset.next()){
            	details = new HashMap<String,Object>();
            	statement = conn.createStatement();
            	query = String.format("SELECT COUNT(*) FROM Athlete WHERE LOWER(member_id) = LOWER('%s');", member);
            	ResultSet athlete = statement.executeQuery(query);
            	statement = conn.createStatement();
            	query = String.format("SELECT COUNT(*) FROM official WHERE LOWER(member_id) = LOWER('%s');", member);
            	ResultSet official = statement.executeQuery(query);
            	statement = conn.createStatement();
            	query = String.format("SELECT COUNT(*) FROM staff WHERE LOWER(member_id) = LOWER('%s');", member);
            	ResultSet staff = statement.executeQuery(query);
            	athlete.next();
            	official.next();
            	staff.next();
            	if(athlete.getInt(1) == 1)
            		details.put("member_type", "athlete");            		
            	if(official.getInt(1) == 1)
            		details.put("member_type", "official");
            	if(staff.getInt(1) == 1)
            		details.put("member_type", "staff");
            	statement.close();
            }
        } catch (Exception e) {
            throw new OlympicsDBException("Error checking login details", e);
        }
        finally{
        	reallyClose(conn);
        }   
        return details;
    }

    /**
     * Obtain details for the current memberID
     * @param memberID 
     * @param member_type 
     *
     *
     * @return text to be displayed in the home screen
     * @throws OlympicsDBException
     * @throws SQLException 
     */
    public HashMap<String, Object> getMemberDetails(String memberID) throws OlympicsDBException, SQLException {
    	HashMap<String, Object> details = new HashMap<String, Object>();
    	Connection conn = null;
    	try{
	    	conn = getConnection();
	    	details = new HashMap<String,Object>();
	    	String query = String.format("SELECT COUNT(*) FROM Athlete WHERE LOWER(member_id) = LOWER('%s')", memberID);
	    	Statement statement = conn.createStatement();
	    	ResultSet athlete = statement.executeQuery(query);
	    	athlete.next();
	    	query = String.format("SELECT COUNT(*) FROM official WHERE LOWER(member_id) = LOWER('%s')", memberID);
	    	statement = conn.createStatement();
	    	ResultSet official= statement.executeQuery(query);
	    	official.next();
	    	query = String.format("SELECT COUNT(*) FROM staff WHERE LOWER(member_id) = LOWER('%s')", memberID);
	    	statement = conn.createStatement();
	    	ResultSet staff= statement.executeQuery(query);
	    	staff.next();
	    	if(athlete.getInt(1) == 1)
	    		details.put("member_type", "athlete");            		
	    	if(official.getInt(1) == 1)
	    		details.put("member_type", "official");
	    	if(staff.getInt(1) == 1)
	    		details.put("member_type", "staff");
	    	query = "SELECT *"
					 + "FROM Member NATURAL JOIN\n"
					 + "Country JOIN\n"
					 + "Place ON (accommodation = place_id)\n"
					 + "WHERE member_id = '" + memberID + "\';";
	    	statement = conn.createStatement();
	    	ResultSet rset = statement.executeQuery(query);
	    	rset.next();
	    	details.put("member_id", memberID);
	    	details.put("title", rset.getString("title"));
	    	details.put("first_name", rset.getString("given_names").split(" ")[0]);
	    	details.put("family_name", rset.getString("family_name"));
	    	details.put("country_name", rset.getString("country_name"));
	    	details.put("residence", rset.getString("place_name"));
	    	
	    	//TODO
	    	statement = conn.createStatement();
	    	query = String.format("SELECT COUNT(*)\n"
	    						+ "FROM booking\n"
	    						+ "WHERE booked_for  = \'%s\';", memberID);
	    	rset = statement.executeQuery(query);
	    	rset.next();
	    	details.put("num_bookings", rset.getInt("count"));
	    	
	    	// Some attributes fetched may depend upon member_type
	    	// This is for an athlete
	    	//TODO
	    	if(details.get("member_type").equals("athlete")){
	    		statement = conn.createStatement();
	    		query = String.format("SELECT COUNT(*)\n"
	    							+ "FROM Participates\n"
	    							+ "WHERE athlete_id = \'%s\'\n"
	    							+ "AND medal = 'G';", memberID);
	    		rset = statement.executeQuery(query);
	    		rset.next();
	    		details.put("num_gold", rset.getInt(1));
	    		statement = conn.createStatement();
	    		query = String.format("SELECT COUNT(*)\n"
	    							+ "FROM Participates\n"
	    							+ "WHERE athlete_id = \'%s\'\n"
	    							+ "AND medal = 'S';", memberID);
	    		rset = statement.executeQuery(query);
	    		rset.next();
	        	details.put("num_silver", rset.getInt(1));
	        	statement = conn.createStatement();
	    		query = String.format("SELECT COUNT(*)\n"
	    							+ "FROM Participates\n"
	    							+ "WHERE athlete_id = \'%s\'\n"
	    							+ "AND medal = 'B';", memberID);
	    		rset = statement.executeQuery(query);
	    		rset.next();
	        	details.put("num_bronze", rset.getInt(1));
		    }    	
	        statement.close();
    	}
    	finally{
    		reallyClose(conn);
    	}
    	
        return details;
    }


    //////////  Events  //////////

    /**
     * Get all of the events listed in the olympics for a given sport
     *
     * @param sportname the ID of the sport we are filtering by
     * @return List of the events for that sport
     * @throws OlympicsDBException
     * @throws SQLException 
     */
    ArrayList<HashMap<String, Object>> getEventsOfSport(Integer sportname) throws OlympicsDBException, SQLException {
        // FIXME: Replace the following with REAL OPERATIONS!

        ArrayList<HashMap<String, Object>> events = new ArrayList<>();
        Connection conn = getConnection();
        try{
	        Statement statement = conn.createStatement();
	        String query = String.format("SELECT *\n"
	        							+ "FROM Sport NATURAL JOIN\n"
	        							+ "		EVENT JOIN\n"
	        							+ "		Place ON (sport_venue = place_id)\n"
	        							+ "WHERE sport_id = %d;", sportname);
	        ResultSet rset = statement.executeQuery(query);
	        while(rset.next()){
	        	HashMap<String,Object> event = new HashMap<String,Object>();
	            event1.put("event_id", rset.getString("event_id"));
	            event1.put("sport_id", rset.getString("sport_id"));
	            event1.put("event_name", rset.getString("event_name"));
	            event1.put("event_gender", rset.getString("event_gender"));
	            event1.put("sport_venue", rset.getString("place_name"));
	            event1.put("event_start", rset.getDate("event_start"));
	            events.add(event1);	
	        }
        }
        finally{
        	reallyClose(conn);
        }
        return events;
    }

    /**
     * Retrieve the results for a single event
     * @param eventId the key of the event
     * @return a hashmap for each result in the event.
     * @throws OlympicsDBException
     * @throws SQLException 
     */
    ArrayList<HashMap<String, Object>> getResultsOfEvent(Integer eventId) throws OlympicsDBException, SQLException {
        // FIXME: Replace the following with REAL OPERATIONS!

    	ArrayList<HashMap<String, Object>> results = new ArrayList<>();
    	Connection conn = getConnection();
    	try{
		    Statement statement = conn.createStatement();
		    String query = String.format("SELECT *\n"
		    						   + "FROM Event NATURAL JOIN\n"
		    						   + "Participates JOIN\n"
		    						   + "Member ON (athlete_id = member_id) NATURAL JOIN\n"
		    						   + "COUNTRY\n"
		    						   + "WHERE event_id = '%s';", eventId);
		    ResultSet rset = statement.executeQuery(query);
			while(rset.next()){
				HashMap<String, Object> result = new HashMap<>();
				result.put("participant", String.format("%s, %s",rset.getString("family_name"), rset.getString("give_names").split(" ")[0]));
				result.put("country_name", rset.getString("country_name"));
				switch(rset.getString("medal")){
					case "G":
						result.put("medal", "Gold");
						break;
					case "S":
						result.put("medal", "Silver");
						break;
					case "B":
						result.put("medal", "Bronze");
						break;
					default:
						result.put("medal", "loser");
				}
				results.add(result);
			}
    	}
    	catch(SQLException e){
    		throw e;
    	}
    	finally{
    		reallyClose(conn);
    	}
    	
        return results;
    }


    ///////   Journeys    ////////

    /**
     * Array list of journeys from one place to another on a given date
     * @param journeyDate the date of the journey
     * @param fromPlace the origin, starting place.
     * @param toPlace the destination, place to go to.
     * @return a list of all journeys from the origin to destination
     * @throws SQLException 
     */
    ArrayList<HashMap<String, Object>> findJourneys(String fromPlace, String toPlace, Date journeyDate) throws OlympicsDBException, SQLException {
        // FIXME: Replace the following with REAL OPERATIONS!
        ArrayList<HashMap<String, Object>> journeys = new ArrayList<>();
        
        Connection conn = getConnection();
        Statement statement = conn.createStatement();
        String query = String.format("SELECT *\n"
        			 + "FROM Journy\n"
        			 + "WHERE LOWER(from_place) LIKE LOWER('%%s%')\n"
        			 + "AND LOWER(to_place) LIKE LOWER('%%s%')\n"
        			 + "AND depart_time = %s", fromPlace, toPlace, journeyDate);
        System.out.println(query);
        ResultSet rset = statement.executeQuery(query);
        while(rset.next()){
        	HashMap<String,Object> journey = new HashMap<String,Object>();
            journey.put("journey_id", rset.getString(""));
            journey.put("vehicle_code", rset.getString(""));
            journey.put("origin_name", rset.getString(""));
            journey.put("dest_name", rset.getString(""));
            journey.put("when_departs", rset.getDate(""));
            journey.put("when_arrives", rset.getDate(""));
            journey.put("available_seats", Integer.valueOf(rset.getInt("")));
            journeys.add(journey);
            	
        }
        conn.close();
        return journeys;
    }
    
    ArrayList<HashMap<String,Object>> getMemberBookings(String memberID) throws Exception {
        ArrayList<HashMap<String,Object>> bookings = new ArrayList<HashMap<String,Object>>();
        Exception e = null;
        Boolean chuck = false;
        Connection conn = null;
        try{
        	conn = getConnection();
        	Statement statement = conn.createStatement();
        	String query = "";
        	ResultSet rset = statement.executeQuery(query);
        	while(rset.next()){
        		HashMap<String, Object> booking = new HashMap<>();
        		booking.put("journey_id", Integer.valueOf(17));
                booking.put("vehicle_code", "XYZ124");
                booking.put("origin_name", "SIT");
                booking.put("dest_name", "Olympic Park");
                booking.put("when_departs", new Date());
                booking.put("when_arrives", new Date());		
        		bookings.add(booking);
        	}
        	
        }
        catch(SQLException ex){
        	chuck = true;
        	e = ex;
        }
        finally{
        	reallyClose(conn);
        }
        if(chuck)
        	throw e;
        return bookings;
    }
                
    /**
     * Get details for a specific journey
     * 
     * @return Various details of journey - see JourneyDetails.java
     * @throws OlympicsDBException
     */
    public HashMap<String,Object> getJourneyDetails(int bay) throws OlympicsDBException {
        // FIXME: REPLACE FOLLOWING LINES WITH REAL OPERATION
        // See the constructor in BayDetails.java
    	HashMap<String,Object> details = new HashMap<String,Object>();

    	details.put("journey_id", Integer.valueOf(17));
    	details.put("vehicle_code", "XYZ124");
        details.put("origin_name", "SIT");
        details.put("dest_name", "Olympic Park");
        details.put("when_departs", new Date());
        details.put("when_arrives", new Date());
        details.put("capacity", Integer.valueOf(6));
        details.put("nbooked", Integer.valueOf(3));
    	
        return details;
    }
    
    public HashMap<String,Object> makeBooking(String byStaff, String forMember, Date departs) throws OlympicsDBException {
    	HashMap<String,Object> booking = null;
    	
        // FIXME: DUMMY FUNCTION NEEDS TO BE PROPERLY IMPLEMENTED
    	booking = new HashMap<String,Object>();
        booking.put("vehicle", "TR870R");
    	booking.put("start_day", "21/12/2020");
    	booking.put("start_time", new Date());
    	booking.put("to", "SIT");
    	booking.put("from", "Wentworth");
    	booking.put("booked_by", "Mike");
    	booking.put("whenbooked", new Date());
    	return booking;
    }
    
    public HashMap<String,Object> getBookingDetails(String memberID, Integer journeyId) throws OlympicsDBException {
    	HashMap<String,Object> booking = null;

        // FIXME: DUMMY FUNCTION NEEDS TO BE PROPERLY IMPLEMENTED
    	booking = new HashMap<String,Object>();

    	booking.put("journey_id", journeyId);
        booking.put("vehicle_code", "TR870R");
    	booking.put("when_departs", new Date());
    	booking.put("dest_name", "SIT");
    	booking.put("origin_name", "Wentworth");
    	booking.put("bookedby_name", "Mrs Piggy");
    	booking.put("bookedfor_name", "Mike");
    	booking.put("when_booked", new Date());
    	booking.put("when_arrives", new Date());
    	

        return booking;
    }
    
	public ArrayList<HashMap<String, Object>> getSports() throws Exception {
		ArrayList<HashMap<String,Object>> sports = new ArrayList<HashMap<String,Object>>();
		boolean chuck = false;
		Exception e = null;
		Connection conn = null;
		try{
			conn = getConnection();
			Statement statement = conn.createStatement();
			//TODO
			String query = "";
			ResultSet rset = statement.executeQuery(query);
			while(rset.next()){
				HashMap<String, Object> sport = new HashMap<>();
				sport.put("sport_id", Integer.valueOf(rset.getInt("sport_id")));
				sport.put("sport_name", rset.getString("sport_name"));
				sport.put("discipline", rset.getString("discipline"));
				sports.add(sport);
			}
		}
		catch(SQLException ex){
			e = ex;
			chuck = true;
		}
		finally{
			reallyClose(conn);
		}
		if(chuck)
			throw e;
		return sports;
	}


    /////////////////////////////////////////
    /// Functions below don't need
    /// to be touched.
    ///
    /// They are for connecting and handling errors!!
    /////////////////////////////////////////

    /**
     * Default constructor that simply loads the JDBC driver and sets to the
     * connection details.
     *
     * @throws ClassNotFoundException if the specified JDBC driver can't be
     * found.
     * @throws OlympicsDBException anything else
     */
    DatabaseBackend(InputStream config) throws ClassNotFoundException, OlympicsDBException {
    	Properties props = new Properties();
    	try{
			props.load(config);
		} 
    	catch(IOException e){
			throw new OlympicsDBException("Couldn't read config data",e);
		}

    	dbUser = props.getProperty("username");
    	dbPass = props.getProperty("userpass");
    	String port = props.getProperty("port");
    	String dbname = props.getProperty("dbname");
    	String server = props.getProperty("address");;
    	
        // Load JDBC driver and setup connection details
    	String vendor = props.getProperty("dbvendor");
		if(vendor==null)
    		throw new OlympicsDBException("No vendor config data");
		else if("postgresql".equals(vendor)){ 
    		Class.forName("org.postgresql.Driver");
    		connstring = "jdbc:postgresql://" + server + ":" + port + "/" + dbname;
    	} 
    	else if("oracle".equals(vendor)){
    		Class.forName("oracle.jdbc.driver.OracleDriver");
    		connstring = "jdbc:oracle:thin:@" + server + ":" + port + ":" + dbname;
    	} 
    	else 
    		throw new OlympicsDBException("Unknown database vendor: " + vendor);
		
		// test the connection
		Connection conn = null;
		try{
			conn = getConnection();
		} 
		catch(SQLException e){
			throw new OlympicsDBException("Couldn't open connection", e);
		} 
		finally{
			reallyClose(conn);
		}
    }

	/**
	 * Utility method to ensure a connection is closed without 
	 * generating any exceptions
	 * @param conn Database connection
	 */
	private void reallyClose(Connection conn) {
		if(conn!=null)
			try{
				conn.close();
			} 
			catch(SQLException ignored){}
	}

    /**
     * Construct object with open connection using configured login details
     * @return database connection
     * @throws SQLException if a DB connection cannot be established
     */
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(connstring, dbUser, dbPass);
    }


    
}
